{"version":3,"file":"main.a3839db6abd948658a1c.bundle.js","sources":["webpack:///./src/lib/nextValidIndex.ts"],"sourcesContent":["import { IOption, IState } from '../types/';\n\nexport function nextValidIndex(\n  state: IState,\n  nextPotentialSelectionIndex: number,\n  mode: 'INCREMENT' | 'DECREMENT' = 'INCREMENT',\n): number {\n  const { options } = state;\n  const possibleOptionIndexes = options.reduce(\n    (acc: number[], option: IOption, index: number) => {\n      if (!option.optHeader) {\n        acc.push(index);\n      }\n      return acc;\n    },\n    [],\n  );\n\n  const indexNotFocusable =\n    possibleOptionIndexes.indexOf(nextPotentialSelectionIndex) === -1;\n\n  if (indexNotFocusable && mode === 'INCREMENT') {\n    const nextSelectionPossible =\n      options[nextPotentialSelectionIndex + 1] &&\n      !options[nextPotentialSelectionIndex + 1].optHeader;\n\n    return nextSelectionPossible\n      ? nextPotentialSelectionIndex + 1\n      : possibleOptionIndexes[0];\n  }\n\n  if (indexNotFocusable && mode === 'DECREMENT') {\n    const nextSelectionPossible =\n      options[nextPotentialSelectionIndex - 1] &&\n      !options[nextPotentialSelectionIndex - 1].optHeader;\n\n    return nextSelectionPossible\n      ? nextPotentialSelectionIndex - 1\n      : possibleOptionIndexes[possibleOptionIndexes.length - 1];\n  }\n\n  return nextPotentialSelectionIndex;\n}\n"],"mappings":"AAEA","sourceRoot":""}